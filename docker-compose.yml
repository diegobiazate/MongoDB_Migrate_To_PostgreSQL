services:
  app:
    build:
      context: .
      dockerfile: Dockerfile
    depends_on:
      mongo:
        condition: service_healthy
      postgres:
        condition: service_healthy
    environment:
      - MONGO_URI=mongodb://mongo:27017/chatdb?replicaSet=rs0
      - PG_USER=postgres
      - PG_HOST=postgres
      - PG_DATABASE=chatdb
      - PG_PASSWORD=postgres
      - PG_PORT=5432
    volumes:
      - .:/app
      - /app/node_modules
    command: npm run dev
    networks:
      - chat-network

  mongo:
    image: mongo:7.0
    ports:
      - "27017:27017"
    extra_hosts:
      - host.docker.internal:host-gateway
    volumes:
      - mongo_data:/data/db
      - mongo_config:/data/configdb
    command: ["--replSet", "rs0", "--bind_ip_all", "--port", "27017"]
    healthcheck:
      test: echo "try { rs.status() } catch (err) { rs.initiate({_id:'rs0',members:[{_id:0,host:'host.docker.internal:27017'}]}) }" | mongosh --port 27017 --quiet
      interval: 5s
      timeout: 30s
      retries: 30
      start_period: 0s
      start_interval: 1s
    networks:
      - chat-network

  postgres:
    image: postgres:16
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_DB=chatdb
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    command: postgres -c 'max_connections=200' -c 'work_mem=16MB' -c 'maintenance_work_mem=128MB'
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - chat-network

networks:
  chat-network:
    driver: bridge

volumes:
  mongo_data:
  mongo_config:
  postgres_data: